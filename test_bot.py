#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–æ—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
import asyncio
from pathlib import Path
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv(".env")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(
    sys.stdout,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    level="INFO"
)

async def test_bot():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ Testing Virtual Try-On Bot...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BOT_TOKEN
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token or bot_token == "your_telegram_bot_token_here":
            logger.error("‚ùå BOT_TOKEN not set!")
            return False
        
        logger.info(f"‚úÖ BOT_TOKEN found: {bot_token[:10]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_file = Path("virtual_tryon.db")
        if db_file.exists():
            logger.info("‚úÖ Database file exists")
        else:
            logger.error("‚ùå Database file not found")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from app.config import settings
        logger.info(f"‚úÖ Database URL: {settings.database_url}")
        logger.info(f"‚úÖ Redis URL: {settings.redis_url}")
        logger.info(f"‚úÖ Debug mode: {settings.debug}")
        
        logger.info("üéâ Basic bot configuration is working!")
        logger.info("")
        logger.info("üìã Next steps:")
        logger.info("1. Get real bot token from @BotFather")
        logger.info("2. Update BOT_TOKEN in .env file")
        logger.info("3. Test with real bot")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Test failed: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await test_bot()
    if success:
        logger.info("‚úÖ Bot test completed successfully!")
    else:
        logger.error("‚ùå Bot test failed!")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
