from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
import os
from app.config import settings
from app.services.redis_service import redis_service
from app.bot.middleware import LoggingMiddleware, UserRegistrationMiddleware
from app.bot.handlers import register_handlers
from app.database.base import Base
from app.database.connection import engine
from loguru import logger

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
def get_settings():
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    Returns:
        Settings: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–∞–∫—à–Ω
    """
    if os.getenv("RAILWAY_ENVIRONMENT") or os.getenv("RAILWAY_PROJECT_ID"):
        # –í Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from app import config_prod
        return config_prod.settings
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        return settings


async def init_database():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    
    –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ SQLAlchemy –º–æ–¥–µ–ª–µ–π.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("‚úÖ Database tables created successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to create database tables: {e}")
        logger.warning("‚ö†Ô∏è Bot will continue without database functionality")


async def create_bot():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    current_settings = get_settings()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_database()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º Redis –î–õ–Ø –î–ê–ù–ù–´–• (–Ω–µ –¥–ª—è FSM)
    redis_url = os.getenv("REDIS_URL", current_settings.redis_url)
    
    if redis_url and "localhost" not in redis_url and "127.0.0.1" not in redis_url:
        try:
            await redis_service.connect()
            logger.info(f"‚úÖ Redis connected for user data: {redis_url}")
        except Exception as e:
            logger.error(f"‚ùå Failed to connect to Redis: {e}")
            logger.warning("‚ö†Ô∏è Bot will work without Redis persistence")
    else:
        logger.warning("‚ö†Ô∏è Redis URL not configured, data will not persist")
    
    # FSM –∏—Å–ø–æ–ª—å–∑—É–µ—Ç MemoryStorage (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–µ–ø–ª–æ–µ)
    from aiogram.fsm.storage.memory import MemoryStorage
    storage = MemoryStorage()
    logger.info("‚úÖ Using MemoryStorage for FSM (states will reset on deploy)")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = Bot(
        token=current_settings.bot_token,
        parse_mode=ParseMode.HTML
    )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher(storage=storage)
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware
    dp.message.middleware(LoggingMiddleware())
    dp.callback_query.middleware(LoggingMiddleware())
    dp.message.middleware(UserRegistrationMiddleware())
    dp.callback_query.middleware(UserRegistrationMiddleware())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_handlers(dp)
    
    logger.info("Bot created successfully with all handlers and middleware")
    return bot, dp


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot, dp = None, None


async def get_bot():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global bot, dp
    if bot is None or dp is None:
        bot, dp = await create_bot()
    return bot, dp


async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot, dp = await get_bot()
    
    try:
        logger.info("Starting bot...")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ Telegram API
        try:
            await dp.start_polling(bot)
        except Exception as telegram_error:
            if "Conflict: terminated by other getUpdates request" in str(telegram_error):
                logger.error("‚ùå Telegram API Conflict: Another bot instance is running")
                logger.info("üîÑ Waiting 5 seconds before retry...")
                import asyncio
                await asyncio.sleep(5)
                logger.info("üîÑ Retrying bot start...")
                await dp.start_polling(bot)
            else:
                raise telegram_error
                
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        raise
    finally:
        await bot.session.close()
        await redis_service.disconnect()