from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from app.bot.states import UserStates
from app.bot.keyboards import MainKeyboard
from app.services.ai_logging_service import ai_logging_service
from loguru import logger
import asyncio
from datetime import datetime


async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"""
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Virtual Try-On Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–∏–º–µ—Ä–∏—Ç—å –æ–¥–µ–∂–¥—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.

üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –≤ –Ω–æ–≤–æ–π –æ–¥–µ–∂–¥–µ
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ—Ä–∫–∏

üöÄ <b>–ù–∞—á–Ω–µ–º?</b>
–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ —Ñ–æ—Ç–æ!
    """
    
    await message.answer(
        welcome_text,
        reply_markup=MainKeyboard.get_main_menu()
    )
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ–ª—Ñ–∏
    await state.set_state(UserStates.waiting_for_selfie)
    
    await message.answer(
        "üì∑ <b>–®–∞–≥ 1:</b> –ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Å–µ–ª—Ñ–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
        reply_markup=MainKeyboard.get_cancel_keyboard()
    )
    
    logger.info(f"User {user.id} started bot")


async def help_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    
    help_text = """
‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/profile - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º

ü§ñ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò —Å–µ—Ä–≤–∏—Å–æ–≤:</b>
/test_vmodel - –¢–µ—Å—Ç VModel API
/test_fashn - –¢–µ—Å—Ç Fashn API
/test_pixelcut - –¢–µ—Å—Ç Pixelcut API

üì∏ <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å try-on:</b>
1. –ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Å–µ–ª—Ñ–∏
2. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç
3. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã
4. –í—ã–±–µ—Ä–∏ –ò–ò —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
5. –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
‚Ä¢ –°–µ–ª—Ñ–∏ –¥–µ–ª–∞–π –∞–Ω—Ñ–∞—Å —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
‚Ä¢ –§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç - –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –ø–æ–∑–µ
‚Ä¢ –û–¥–µ–∂–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ

‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>
–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏ @support
    """
    
    await message.answer(help_text)
    logger.info(f"User {message.from_user.id} requested help")


async def profile_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    from app.bot.keyboards import ProfileKeyboard
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    profile_text = """
üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º</b>

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
‚Ä¢ –£–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–æ—Ç–æ
    """
    
    await message.answer(
        profile_text,
        reply_markup=ProfileKeyboard.get_photo_upload_keyboard()
    )
    
    logger.info(f"User {message.from_user.id} opened profile")


async def test_vmodel_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_vmodel"""
    user = message.from_user
    current_state = await state.get_state()
    
    if current_state != UserStates.photos_uploaded:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è!",
            reply_markup=MainKeyboard.get_main_menu()
        )
        return
    
    start_time = datetime.now()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    await ai_logging_service.log_ai_request(
        user_id=user.id,
        service_name="VModel",
        request_data={"type": "try_on_generation", "user_photos": "loaded", "command": "/test_vmodel"},
        start_time=start_time
    )
    
    await state.set_state(UserStates.waiting_ai_response)
    await message.answer(
        "ü§ñ <b>–¢–µ—Å—Ç–∏—Ä—É–µ–º VModel...</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –≤ VModel API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥.",
        reply_markup=MainKeyboard.get_cancel_keyboard()
    )
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è VModel
    await asyncio.sleep(3)
    processing_time = (datetime.now() - start_time).total_seconds()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    await ai_logging_service.log_ai_response(
        user_id=user.id,
        service_name="VModel",
        response_data={"status": "success", "result_type": "try_on_image"},
        processing_time=processing_time,
        success=True
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    await ai_logging_service.log_ai_quality_metrics(
        user_id=user.id,
        service_name="VModel",
        quality_score=4,
        processing_time=processing_time
    )
    
    await message.answer(
        "üéâ <b>VModel —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!</b>\n\n(–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ –§–∞–∑–µ 4.2)\n\n–ö–∞—á–µ—Å—Ç–≤–æ: ‚≠ê‚≠ê‚≠ê‚≠ê\n–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 2.3 —Å–µ–∫",
        reply_markup=MainKeyboard.get_ai_testing_keyboard()
    )
    await state.set_state(UserStates.photos_uploaded)
    
    logger.info(f"User {user.id} tested VModel service")


async def test_fashn_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_fashn"""
    user = message.from_user
    current_state = await state.get_state()
    
    if current_state != UserStates.photos_uploaded:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è!",
            reply_markup=MainKeyboard.get_main_menu()
        )
        return
    
    start_time = datetime.now()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    await ai_logging_service.log_ai_request(
        user_id=user.id,
        service_name="Fashn",
        request_data={"type": "try_on_generation", "user_photos": "loaded", "command": "/test_fashn"},
        start_time=start_time
    )
    
    await state.set_state(UserStates.waiting_ai_response)
    await message.answer(
        "üëó <b>–¢–µ—Å—Ç–∏—Ä—É–µ–º Fashn...</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –≤ Fashn API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥.",
        reply_markup=MainKeyboard.get_cancel_keyboard()
    )
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Fashn
    await asyncio.sleep(3)
    processing_time = (datetime.now() - start_time).total_seconds()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    await ai_logging_service.log_ai_response(
        user_id=user.id,
        service_name="Fashn",
        response_data={"status": "success", "result_type": "try_on_image"},
        processing_time=processing_time,
        success=True
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    await ai_logging_service.log_ai_quality_metrics(
        user_id=user.id,
        service_name="Fashn",
        quality_score=5,
        processing_time=processing_time
    )
    
    await message.answer(
        "üéâ <b>Fashn —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!</b>\n\n(–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ –§–∞–∑–µ 4.3)\n\n–ö–∞—á–µ—Å—Ç–≤–æ: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 1.8 —Å–µ–∫",
        reply_markup=MainKeyboard.get_ai_testing_keyboard()
    )
    await state.set_state(UserStates.photos_uploaded)
    
    logger.info(f"User {user.id} tested Fashn service")


async def test_pixelcut_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_pixelcut"""
    user = message.from_user
    current_state = await state.get_state()
    
    if current_state != UserStates.photos_uploaded:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è!",
            reply_markup=MainKeyboard.get_main_menu()
        )
        return
    
    start_time = datetime.now()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    await ai_logging_service.log_ai_request(
        user_id=user.id,
        service_name="Pixelcut",
        request_data={"type": "try_on_generation", "user_photos": "loaded", "command": "/test_pixelcut"},
        start_time=start_time
    )
    
    await state.set_state(UserStates.waiting_ai_response)
    await message.answer(
        "‚úÇÔ∏è <b>–¢–µ—Å—Ç–∏—Ä—É–µ–º Pixelcut...</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –≤ Pixelcut API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥.",
        reply_markup=MainKeyboard.get_cancel_keyboard()
    )
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Pixelcut
    await asyncio.sleep(3)
    processing_time = (datetime.now() - start_time).total_seconds()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    await ai_logging_service.log_ai_response(
        user_id=user.id,
        service_name="Pixelcut",
        response_data={"status": "success", "result_type": "try_on_image"},
        processing_time=processing_time,
        success=True
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    await ai_logging_service.log_ai_quality_metrics(
        user_id=user.id,
        service_name="Pixelcut",
        quality_score=3,
        processing_time=processing_time
    )
    
    await message.answer(
        "üéâ <b>Pixelcut —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!</b>\n\n(–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ –§–∞–∑–µ 4.4)\n\n–ö–∞—á–µ—Å—Ç–≤–æ: ‚≠ê‚≠ê‚≠ê\n–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 3.1 —Å–µ–∫",
        reply_markup=MainKeyboard.get_ai_testing_keyboard()
    )
    await state.set_state(UserStates.photos_uploaded)
    
    logger.info(f"User {user.id} tested Pixelcut service")


async def clear_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
    await state.clear()
    await message.answer(
        "üßπ <b>–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!</b>\n\n–í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        reply_markup=MainKeyboard.get_main_menu()
    )
    logger.info(f"User {message.from_user.id} cleared data")


async def cancel_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=MainKeyboard.get_main_menu()
    )
    logger.info(f"User {message.from_user.id} cancelled operation")


def register_command_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    dp.message.register(start_command, Command("start"))
    dp.message.register(help_command, Command("help"))
    dp.message.register(profile_command, Command("profile"))
    dp.message.register(clear_command, Command("clear"))
    dp.message.register(test_vmodel_command, Command("test_vmodel"))
    dp.message.register(test_fashn_command, Command("test_fashn"))
    dp.message.register(test_pixelcut_command, Command("test_pixelcut"))
    dp.message.register(cancel_handler, lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
