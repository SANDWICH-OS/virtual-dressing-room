from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from app.bot.states import UserStates
from app.bot.keyboards import MainKeyboard
from app.services.ai_logging_service import ai_logging_service
from loguru import logger
import asyncio
from datetime import datetime


async def start_command(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'authorized'.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    """
    user = message.from_user
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"""
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Virtual Try-On Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–∏–º–µ—Ä–∏—Ç—å –æ–¥–µ–∂–¥—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
/clear - –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
/upload_user_photo - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/upload_clothing_photo - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã
/test_vmodel - –¢–µ—Å—Ç VModel API
/test_fashn - –¢–µ—Å—Ç Fashn API
/test_pixelcut - –¢–µ—Å—Ç Pixelcut API
/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
/back - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üöÄ <b>–ù–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É!</b>
    """
    
    await message.answer(
        welcome_text,
        reply_markup=MainKeyboard.get_main_menu()
    )
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    await state.set_state(UserStates.authorized)
    
    logger.info(f"User {user.id} started bot")


async def help_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    
    help_text = """
‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/profile - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º

ü§ñ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò —Å–µ—Ä–≤–∏—Å–æ–≤:</b>
/test_vmodel - –¢–µ—Å—Ç VModel API
/test_fashn - –¢–µ—Å—Ç Fashn API
/test_pixelcut - –¢–µ—Å—Ç Pixelcut API

üì∏ <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å try-on:</b>
1. –ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Å–µ–ª—Ñ–∏
2. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç
3. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã
4. –í—ã–±–µ—Ä–∏ –ò–ò —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
5. –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
‚Ä¢ –°–µ–ª—Ñ–∏ –¥–µ–ª–∞–π –∞–Ω—Ñ–∞—Å —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
‚Ä¢ –§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç - –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –ø–æ–∑–µ
‚Ä¢ –û–¥–µ–∂–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ

‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>
–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏ @support
    """
    
    await message.answer(help_text)
    logger.info(f"User {message.from_user.id} requested help")


async def profile_command(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–º—è, –ø–æ–¥–ø–∏—Å–∫–∞
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–æ–¥–µ–∂–¥–∞)
    - –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    """
    from app.database.async_session import get_async_session
    from app.models.user import User
    from app.models.photo import UserPhoto, PhotoType
    from sqlalchemy import select, func, delete
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    user = message.from_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
        async with get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == user.id)
            )
            db_user = result.scalar_one_or_none()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
            if db_user:
                logger.info(f"Profile: Looking for photos with user_id = {db_user.id}")
                user_photo_count = await session.scalar(
                    select(func.count(UserPhoto.id)).where(
                        UserPhoto.user_id == db_user.id,
                        UserPhoto.photo_type == PhotoType.USER_PHOTO
                    )
                ) or 0
                
                clothing_count = await session.scalar(
                    select(func.count(UserPhoto.id)).where(
                        UserPhoto.user_id == db_user.id,
                        UserPhoto.photo_type == PhotoType.CLOTHING
                    )
                ) or 0
                
                logger.info(f"Profile: Found {user_photo_count} user photos, {clothing_count} clothing photos")
            else:
                user_photo_count = 0
                clothing_count = 0
                logger.info("Profile: No user found in database")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
            if db_user:
                subscription_info = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è" if db_user.subscription_type == "free" else f"üíé {db_user.subscription_type.title()}"
                generation_count = db_user.generation_count or 0
                created_at = db_user.created_at.strftime("%d.%m.%Y") if db_user.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            else:
                subscription_info = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"
                generation_count = 0
                created_at = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            profile_text = f"""
üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî <b>ID:</b> {user.id}
üë§ <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß <b>Username:</b> @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_info}
üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {generation_count}
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {created_at}

üì∏ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {'‚úÖ –î–∞' if user_photo_count > 0 else '‚ùå –ù–µ—Ç'}
‚Ä¢ –û–¥–µ–∂–¥–∞: {'‚úÖ –î–∞' if clothing_count > 0 else '‚ùå –ù–µ—Ç'}

{'‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!' if user_photo_count > 0 and clothing_count > 0 else '‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'}
            """
            
            await message.answer(
                profile_text,
                reply_markup=MainKeyboard.get_main_menu()
            )
            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ authorized
            await state.set_state(UserStates.authorized)
            
    except Exception as e:
        logger.error(f"Error getting profile info for user {user.id}: {e}")
        # Fallback –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ –ë–î
        profile_text = f"""
üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî <b>ID:</b> {user.id}
üë§ <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß <b>Username:</b> @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è
üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> 0
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ

üì∏ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ‚ùå –ù–µ—Ç
‚Ä¢ –û–¥–µ–∂–¥–∞: ‚ùå –ù–µ—Ç

‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        """
        
        await message.answer(
            profile_text,
            reply_markup=MainKeyboard.get_main_menu()
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ authorized
        await state.set_state(UserStates.authorized)
    
    logger.info(f"User {message.from_user.id} viewed profile")


async def test_fashn_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_fashn"""
    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–¥–µ–∂–¥—ã
    try:
        from app.database.async_session import get_async_session
        from app.models.user import User
        from app.models.photo import UserPhoto, PhotoType
        from sqlalchemy import select, and_
        
        async with get_async_session() as session:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            user_result = await session.execute(
                select(User).where(User.telegram_id == user.id)
            )
            db_user = user_result.scalar_one_or_none()
            
            if not db_user:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    reply_markup=MainKeyboard.get_main_menu()
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_photo_result = await session.execute(
                select(UserPhoto).where(
                    and_(UserPhoto.user_id == db_user.id, UserPhoto.photo_type == PhotoType.USER_PHOTO)
                )
            )
            user_photo = user_photo_result.scalar_one_or_none()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã
            clothing_photo_result = await session.execute(
                select(UserPhoto).where(
                    and_(UserPhoto.user_id == db_user.id, UserPhoto.photo_type == PhotoType.CLOTHING)
                )
            )
            clothing_photo = clothing_photo_result.scalar_one_or_none()
            
            if not user_photo or not clothing_photo:
                missing_photos = []
                if not user_photo:
                    missing_photos.append("—Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                if not clothing_photo:
                    missing_photos.append("—Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã")
                
                await message.answer(
                    f"‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ {', '.join(missing_photos)}!\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n/upload_user_photo - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/upload_clothing_photo - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã",
                    reply_markup=MainKeyboard.get_main_menu()
                )
                return
                
    except Exception as e:
        logger.error(f"Error checking photos for user {user.id}: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=MainKeyboard.get_main_menu()
        )
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FashnService
    from app.services.fashn_service import fashn_service
    from app.services.redis_service import redis_service
    
    start_time = datetime.now()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    await ai_logging_service.log_ai_request(
        user_id=user.id,
        service_name="Fashn",
        request_data={"type": "try_on_generation", "user_photos": "loaded", "command": "/test_fashn"},
        start_time=start_time
    )
    
    await state.set_state(UserStates.waiting_ai_response)
    await message.answer(
        "üëó <b>–¢–µ—Å—Ç–∏—Ä—É–µ–º Fashn...</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –≤ Fashn API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥.",
        reply_markup=MainKeyboard.get_main_menu()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Fashn AI
    success, response_message, prediction_id = await fashn_service.submit_tryon_request(
        user_photo_url=user_photo.photo_url,
        clothing_photo_url=clothing_photo.photo_url,
        user_id=user.id
    )
    
    if success and prediction_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è webhook –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await redis_service.set_json(
            f"fashn_prediction:{prediction_id}",
            {
                "user_id": user.id,
                "start_time": start_time.isoformat(),
                "user_photo_url": user_photo.photo_url,
                "clothing_photo_url": clothing_photo.photo_url
            },
            expire=3600  # 1 —á–∞—Å
        )
        
        await message.answer(
            f"‚úÖ <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Fashn AI!</b>\n\n{response_message}\n\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ webhook...",
            reply_markup=MainKeyboard.get_main_menu()
        )
        
        logger.info(f"User {user.id} submitted Fashn request with prediction ID: {prediction_id}")
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        await state.set_state(UserStates.authorized)
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ Fashn AI</b>\n\n{response_message}",
            reply_markup=MainKeyboard.get_main_menu()
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await ai_logging_service.log_ai_response(
            user_id=user.id,
            service_name="Fashn",
            response_data={"error": message},
            processing_time=(datetime.now() - start_time).total_seconds(),
            success=False,
            error_message=message
        )
        
        logger.error(f"Fashn request failed for user {user.id}: {message}")



async def clear_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear - –æ—á–∏—â–∞–µ—Ç —Ñ–æ—Ç–æ –∏–∑ –ë–î –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis"""
    from app.database.async_session import get_async_session
    from app.models.user import User
    from app.models.photo import UserPhoto
    from app.services.redis_service import redis_service
    from sqlalchemy import select, delete
    
    user = message.from_user
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –ë–î
        async with get_async_session() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == user.id)
            )
            db_user = result.scalar_one_or_none()
            
            if db_user:
                await session.execute(
                    delete(UserPhoto).where(UserPhoto.user_id == db_user.id)
                )
                await session.commit()
                logger.info(f"User {user.id} cleared photos from database")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
        await redis_service.clear_user_data(user.id)
        
        # –û—á–∏—â–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            "üßπ <b>–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!</b>\n\n–í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ, –∫–µ—à –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=MainKeyboard.get_main_menu()
        )
        await state.set_state(UserStates.authorized)
        
    except Exception as e:
        logger.error(f"Error clearing data for user {user.id}: {e}")
        await state.clear()
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=MainKeyboard.get_main_menu()
        )
        await state.set_state(UserStates.authorized)


async def upload_user_photo_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upload_user_photo"""
    await state.set_state(UserStates.waiting_user_photo)
    await message.answer(
        "üì∑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å —Ç–≤–æ–µ —Ñ–æ—Ç–æ. –ó–∞–≥—Ä—É–∑–∏ —Å–µ–ª—Ñ–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n\nüí° <b>–°–æ–≤–µ—Ç—ã:</b>\n‚Ä¢ –î–µ–ª–∞–π —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º\n‚Ä¢ –õ–∏—Ü–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ\n‚Ä¢ –ò–∑–±–µ–≥–∞–π —Ç–µ–Ω–µ–π –∏ –±–ª–∏–∫–æ–≤",
        reply_markup=MainKeyboard.get_back_keyboard()
    )
    logger.info(f"User {message.from_user.id} started user photo upload")


async def upload_clothing_photo_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upload_clothing_photo"""
    await state.set_state(UserStates.waiting_clothing_photo)
    await message.answer(
        "üëó <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã</b>\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–¥–µ–∂–¥—ã.\n\nüí° <b>–°–æ–≤–µ—Ç—ã:</b>\n‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ\n‚Ä¢ –û–¥–µ–∂–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞\n‚Ä¢ –ò–∑–±–µ–≥–∞–π —Ç–µ–Ω–µ–π –∏ —Å–∫–ª–∞–¥–æ–∫",
        reply_markup=MainKeyboard.get_back_keyboard()
    )
    logger.info(f"User {message.from_user.id} started clothing photo upload")


async def subscription_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription"""
    await state.set_state(UserStates.subscription_management)
    await message.answer(
        "üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏ –ª–∏–º–∏—Ç–∞—Ö.\n–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=MainKeyboard.get_back_keyboard()
    )
    logger.info(f"User {message.from_user.id} opened subscription management")


async def back_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /back"""
    await state.set_state(UserStates.authorized)
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=MainKeyboard.get_main_menu()
    )
    logger.info(f"User {message.from_user.id} returned to main menu")




def register_command_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    dp.message.register(start_command, Command("start"))
    dp.message.register(help_command, Command("help"))
    dp.message.register(profile_command, Command("profile"))
    dp.message.register(clear_command, Command("clear"))
    dp.message.register(upload_user_photo_command, Command("upload_user_photo"))
    dp.message.register(upload_clothing_photo_command, Command("upload_clothing_photo"))
    dp.message.register(subscription_command, Command("subscription"))
    dp.message.register(back_command, Command("back"))
    dp.message.register(test_fashn_command, Command("test_fashn"))
    dp.message.register(back_command, lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
