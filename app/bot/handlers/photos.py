from aiogram import Dispatcher
from aiogram.types import Message, PhotoSize
from aiogram.fsm.context import FSMContext
from app.bot.states import UserStates
from app.bot.keyboards import MainKeyboard, ProfileKeyboard
from app.services.file_service import file_service
from app.models.photo import PhotoType
from app.database.async_session import get_async_session
from loguru import logger
import asyncio


async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
    user = message.from_user
    current_state = await state.get_state()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    photo = max(message.photo, key=lambda p: p.file_size)
    
    logger.info(f"User {user.id} uploaded photo, current state: {current_state}")
    
    if current_state == UserStates.waiting_for_selfie:
        await handle_selfie_photo(message, photo, state)
    elif current_state == UserStates.waiting_for_full_body:
        await handle_fullbody_photo(message, photo, state)
    elif current_state == UserStates.waiting_for_clothing:
        await handle_clothing_photo(message, photo, state)
    else:
        await message.answer(
            "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=MainKeyboard.get_main_menu()
        )


async def handle_selfie_photo(message: Message, photo: PhotoSize, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–ª—Ñ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = message.from_user
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        cloudinary_url, public_id, error = await file_service.process_telegram_photo(
            message.bot, photo, user.id, PhotoType.SELFIE
        )
        
        if error:
            await message.answer(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        async with get_async_session() as session:
            await file_service.save_photo_to_database(
                session, user.id, cloudinary_url, PhotoType.SELFIE, public_id
            )
        
        await message.answer("‚úÖ –°–µ–ª—Ñ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.set_state(UserStates.waiting_for_full_body)
        await message.answer(
            "üì∏ <b>–®–∞–≥ 2:</b> –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç",
            reply_markup=MainKeyboard.get_cancel_keyboard()
        )
        
        logger.info(f"User {user.id} uploaded selfie successfully")
        
    except Exception as e:
        logger.error(f"Error handling selfie for user {user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


async def handle_fullbody_photo(message: Message, photo: PhotoSize, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç"""
    user = message.from_user
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        cloudinary_url, public_id, error = await file_service.process_telegram_photo(
            message.bot, photo, user.id, PhotoType.FULL_BODY
        )
        
        if error:
            await message.answer(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        async with get_async_session() as session:
            await file_service.save_photo_to_database(
                session, user.id, cloudinary_url, PhotoType.FULL_BODY, public_id
            )
        
        await message.answer("‚úÖ –§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        
        # –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ò–ò
        await state.set_state(UserStates.photos_uploaded)
        await message.answer(
            "üéâ <b>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!</b>\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ò–ò —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!",
            reply_markup=MainKeyboard.get_ai_testing_keyboard()
        )
        
        logger.info(f"User {user.id} uploaded fullbody photo successfully")
        
    except Exception as e:
        logger.error(f"Error handling fullbody photo for user {user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


async def handle_clothing_photo(message: Message, photo: PhotoSize, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã"""
    user = message.from_user
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        cloudinary_url, public_id, error = await file_service.process_telegram_photo(
            message.bot, photo, user.id, PhotoType.CLOTHING
        )
        
        if error:
            await message.answer(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        async with get_async_session() as session:
            await file_service.save_photo_to_database(
                session, user.id, cloudinary_url, PhotoType.CLOTHING, public_id
            )
        
        await message.answer("‚úÖ –§–æ—Ç–æ –æ–¥–µ–∂–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ò–ò
        await state.set_state(UserStates.photos_uploaded)
        await message.answer(
            "üéâ <b>–í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!</b>\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ò–ò —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!",
            reply_markup=MainKeyboard.get_ai_testing_keyboard()
        )
        
        logger.info(f"User {user.id} uploaded clothing photo successfully")
        
    except Exception as e:
        logger.error(f"Error handling clothing photo for user {user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


def register_photo_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ç–æ"""
    dp.message.register(handle_photo, lambda m: m.photo is not None)
