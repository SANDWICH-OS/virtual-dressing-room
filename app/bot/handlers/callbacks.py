from aiogram import Dispatcher
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from app.bot.states import UserStates
from app.bot.keyboards import MainKeyboard, ProfileKeyboard, TryOnKeyboard
from loguru import logger


async def handle_yes_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–∞'"""
    await callback.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    logger.info(f"User {callback.from_user.id} pressed 'Yes'")


async def handle_no_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–µ—Ç'"""
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text("–ü–æ–Ω—è—Ç–Ω–æ. –ß—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?")
    logger.info(f"User {callback.from_user.id} pressed 'No'")


async def handle_upload_selfie_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–ª—Ñ–∏"""
    await callback.answer()
    await state.set_state(UserStates.waiting_for_selfie)
    await callback.message.edit_text(
        "üì∑ <b>–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Å–µ–ª—Ñ–∏</b>\n\n–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º",
        reply_markup=None
    )
    logger.info(f"User {callback.from_user.id} started selfie upload")


async def handle_upload_fullbody_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç"""
    await callback.answer()
    await state.set_state(UserStates.waiting_for_full_body)
    await callback.message.edit_text(
        "üì∏ <b>–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç</b>\n\n–í—Å—Ç–∞–Ω—å –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –ø–æ–∑–µ, —Ä—É–∫–∏ –ø–æ —à–≤–∞–º",
        reply_markup=None
    )
    logger.info(f"User {callback.from_user.id} started fullbody upload")


async def handle_delete_selfie_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–ª—Ñ–∏"""
    await callback.answer("üóë –°–µ–ª—Ñ–∏ —É–¥–∞–ª–µ–Ω–æ")
    await callback.message.edit_text("–°–µ–ª—Ñ–∏ —É–¥–∞–ª–µ–Ω–æ. –ó–∞–≥—Ä—É–∑–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
    logger.info(f"User {callback.from_user.id} deleted selfie")


async def handle_delete_fullbody_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç"""
    await callback.answer("üóë –§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç —É–¥–∞–ª–µ–Ω–æ")
    await callback.message.edit_text("–§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç —É–¥–∞–ª–µ–Ω–æ. –ó–∞–≥—Ä—É–∑–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
    logger.info(f"User {callback.from_user.id} deleted fullbody photo")


async def handle_regenerate_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await callback.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–Ω–æ–≤–æ...")
    await callback.message.edit_text("‚ö° –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    logger.info(f"User {callback.from_user.id} requested regeneration")


async def handle_save_result_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    await callback.answer("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await callback.message.edit_text("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ç–≤–æ—é –≥–∞–ª–µ—Ä–µ—é")
    logger.info(f"User {callback.from_user.id} saved result")


async def handle_share_result_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
    await callback.answer("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º")
    await callback.message.edit_text("üîó –°—Å—ã–ª–∫–∞ –¥–ª—è sharing –±—É–¥–µ—Ç –∑–¥–µ—Å—å")
    logger.info(f"User {callback.from_user.id} shared result")


async def handle_subscription_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
    subscription_type = callback.data.split("_")[-1]
    
    if subscription_type == "premium":
        await callback.answer("üíé Premium –ø–æ–¥–ø–∏—Å–∫–∞")
        await callback.message.edit_text(
            "üíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –º–µ—Å—è—Ü\n–¶–µ–Ω–∞: 299‚ÇΩ/–º–µ—Å—è—Ü",
            reply_markup=TryOnKeyboard.get_subscription_keyboard()
        )
    elif subscription_type.startswith("package"):
        count = subscription_type.split("_")[1]
        await callback.answer(f"üì¶ –ü–∞–∫–µ—Ç {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
        await callback.message.edit_text(
            f"üì¶ <b>–ü–∞–∫–µ—Ç {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π</b>\n\n–¶–µ–Ω–∞: {int(count) * 50}‚ÇΩ",
            reply_markup=TryOnKeyboard.get_subscription_keyboard()
        )
    elif subscription_type == "info":
        await callback.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö")
        await callback.message.edit_text(
            "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö</b>\n\n"
            "üíé Premium: 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π/–º–µ—Å—è—Ü - 299‚ÇΩ\n"
            "üì¶ –ü–∞–∫–µ—Ç 10: 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 500‚ÇΩ\n"
            "üì¶ –ü–∞–∫–µ—Ç 25: 25 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 1000‚ÇΩ",
            reply_markup=TryOnKeyboard.get_subscription_keyboard()
        )
    
    logger.info(f"User {callback.from_user.id} viewed subscription: {subscription_type}")


def register_callback_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤"""
    dp.callback_query.register(handle_yes_callback, lambda c: c.data == "yes")
    dp.callback_query.register(handle_no_callback, lambda c: c.data == "no")
    dp.callback_query.register(handle_upload_selfie_callback, lambda c: c.data == "upload_selfie")
    dp.callback_query.register(handle_upload_fullbody_callback, lambda c: c.data == "upload_fullbody")
    dp.callback_query.register(handle_delete_selfie_callback, lambda c: c.data == "delete_selfie")
    dp.callback_query.register(handle_delete_fullbody_callback, lambda c: c.data == "delete_fullbody")
    dp.callback_query.register(handle_regenerate_callback, lambda c: c.data == "regenerate")
    dp.callback_query.register(handle_save_result_callback, lambda c: c.data == "save_result")
    dp.callback_query.register(handle_share_result_callback, lambda c: c.data == "share_result")
    dp.callback_query.register(handle_subscription_callback, lambda c: c.data.startswith("subscribe_") or c.data.startswith("buy_package_") or c.data == "subscription_info")
