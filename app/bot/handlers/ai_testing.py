from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from app.bot.states import UserStates
from app.bot.keyboards import MainKeyboard
from app.services.ai_logging_service import ai_logging_service
from loguru import logger
import asyncio
from datetime import datetime


async def handle_ai_testing_buttons(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò —Å–µ—Ä–≤–∏—Å–æ–≤"""
    user = message.from_user
    current_state = await state.get_state()
    
    if current_state != UserStates.photos_uploaded:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è!",
            reply_markup=MainKeyboard.get_main_menu()
        )
        return
    
    text = message.text
    
    if text == "ü§ñ –¢–µ—Å—Ç VModel":
        await test_vmodel_service(message, state)
    elif text == "üëó –¢–µ—Å—Ç Fashn":
        await test_fashn_service(message, state)
    elif text == "‚úÇÔ∏è –¢–µ—Å—Ç Pixelcut":
        await test_pixelcut_service(message, state)
    elif text == "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã":
        await handle_clothing_upload_request(message, state)
    else:
        await message.answer(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=MainKeyboard.get_ai_testing_keyboard()
        )


async def test_vmodel_service(message: Message, state: FSMContext):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VModel —Å–µ—Ä–≤–∏—Å–∞"""
    user = message.from_user
    start_time = datetime.now()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    await ai_logging_service.log_ai_request(
        user_id=user.id,
        service_name="VModel",
        request_data={"type": "try_on_generation", "user_photos": "loaded"},
        start_time=start_time
    )
    
    await state.set_state(UserStates.waiting_ai_response)
    await message.answer(
        "ü§ñ <b>–¢–µ—Å—Ç–∏—Ä—É–µ–º VModel...</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –≤ VModel API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥.",
        reply_markup=MainKeyboard.get_cancel_keyboard()
    )
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è VModel
    await asyncio.sleep(3)
    processing_time = (datetime.now() - start_time).total_seconds()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    await ai_logging_service.log_ai_response(
        user_id=user.id,
        service_name="VModel",
        response_data={"status": "success", "result_type": "try_on_image"},
        processing_time=processing_time,
        success=True
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    await ai_logging_service.log_ai_quality_metrics(
        user_id=user.id,
        service_name="VModel",
        quality_score=4,
        processing_time=processing_time
    )
    
    await message.answer(
        "üéâ <b>VModel —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!</b>\n\n(–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ –§–∞–∑–µ 4.2)\n\n–ö–∞—á–µ—Å—Ç–≤–æ: ‚≠ê‚≠ê‚≠ê‚≠ê\n–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 2.3 —Å–µ–∫",
        reply_markup=MainKeyboard.get_ai_testing_keyboard()
    )
    await state.set_state(UserStates.photos_uploaded)
    
    logger.info(f"User {user.id} tested VModel service via button")


async def test_fashn_service(message: Message, state: FSMContext):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Fashn —Å–µ—Ä–≤–∏—Å–∞"""
    user = message.from_user
    start_time = datetime.now()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    await ai_logging_service.log_ai_request(
        user_id=user.id,
        service_name="Fashn",
        request_data={"type": "try_on_generation", "user_photos": "loaded"},
        start_time=start_time
    )
    
    await state.set_state(UserStates.waiting_ai_response)
    await message.answer(
        "üëó <b>–¢–µ—Å—Ç–∏—Ä—É–µ–º Fashn...</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –≤ Fashn API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥.",
        reply_markup=MainKeyboard.get_cancel_keyboard()
    )
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Fashn
    await asyncio.sleep(3)
    processing_time = (datetime.now() - start_time).total_seconds()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    await ai_logging_service.log_ai_response(
        user_id=user.id,
        service_name="Fashn",
        response_data={"status": "success", "result_type": "try_on_image"},
        processing_time=processing_time,
        success=True
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    await ai_logging_service.log_ai_quality_metrics(
        user_id=user.id,
        service_name="Fashn",
        quality_score=5,
        processing_time=processing_time
    )
    
    await message.answer(
        "üéâ <b>Fashn —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!</b>\n\n(–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ –§–∞–∑–µ 4.3)\n\n–ö–∞—á–µ—Å—Ç–≤–æ: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 1.8 —Å–µ–∫",
        reply_markup=MainKeyboard.get_ai_testing_keyboard()
    )
    await state.set_state(UserStates.photos_uploaded)
    
    logger.info(f"User {user.id} tested Fashn service via button")


async def test_pixelcut_service(message: Message, state: FSMContext):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pixelcut —Å–µ—Ä–≤–∏—Å–∞"""
    user = message.from_user
    start_time = datetime.now()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    await ai_logging_service.log_ai_request(
        user_id=user.id,
        service_name="Pixelcut",
        request_data={"type": "try_on_generation", "user_photos": "loaded"},
        start_time=start_time
    )
    
    await state.set_state(UserStates.waiting_ai_response)
    await message.answer(
        "‚úÇÔ∏è <b>–¢–µ—Å—Ç–∏—Ä—É–µ–º Pixelcut...</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –≤ Pixelcut API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥.",
        reply_markup=MainKeyboard.get_cancel_keyboard()
    )
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Pixelcut
    await asyncio.sleep(3)
    processing_time = (datetime.now() - start_time).total_seconds()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    await ai_logging_service.log_ai_response(
        user_id=user.id,
        service_name="Pixelcut",
        response_data={"status": "success", "result_type": "try_on_image"},
        processing_time=processing_time,
        success=True
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    await ai_logging_service.log_ai_quality_metrics(
        user_id=user.id,
        service_name="Pixelcut",
        quality_score=3,
        processing_time=processing_time
    )
    
    await message.answer(
        "üéâ <b>Pixelcut —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!</b>\n\n(–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ –§–∞–∑–µ 4.4)\n\n–ö–∞—á–µ—Å—Ç–≤–æ: ‚≠ê‚≠ê‚≠ê\n–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 3.1 —Å–µ–∫",
        reply_markup=MainKeyboard.get_ai_testing_keyboard()
    )
    await state.set_state(UserStates.photos_uploaded)
    
    logger.info(f"User {user.id} tested Pixelcut service via button")


async def handle_clothing_upload_request(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã"""
    await state.set_state(UserStates.waiting_for_clothing)
    await message.answer(
        "üì∏ <b>–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã</b>\n\n–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –æ–¥–µ–∂–¥—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø—Ä–∏–º–µ—Ä–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ.\n\nüí° <b>–°–æ–≤–µ—Ç—ã:</b>\n‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ\n‚Ä¢ –û–¥–µ–∂–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞\n‚Ä¢ –ò–∑–±–µ–≥–∞–π —Ç–µ–Ω–µ–π –∏ —Å–∫–ª–∞–¥–æ–∫",
        reply_markup=MainKeyboard.get_cancel_keyboard()
    )
    
    logger.info(f"User {message.from_user.id} requested clothing upload")


def register_ai_testing_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò
    dp.message.register(
        handle_ai_testing_buttons,
        lambda m: m.text in ["ü§ñ –¢–µ—Å—Ç VModel", "üëó –¢–µ—Å—Ç Fashn", "‚úÇÔ∏è –¢–µ—Å—Ç Pixelcut", "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã"]
    )
