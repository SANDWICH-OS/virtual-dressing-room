from fastapi import FastAPI
from contextlib import asynccontextmanager
from app.database.connection import engine, Base
from app.services.redis_service import redis_service
from app.config import settings
import asyncio


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    print("üöÄ Starting Virtual Try-On Bot...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    await redis_service.connect()
    print("‚úÖ Redis connected")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if settings.debug:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ Database tables created")
    
    yield
    
    # Shutdown
    print("üõë Shutting down...")
    await redis_service.disconnect()
    print("‚úÖ Redis disconnected")


app = FastAPI(
    title="Virtual Try-On Telegram Bot",
    description="API –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏ –æ–¥–µ–∂–¥—ã",
    version="1.0.0",
    lifespan=lifespan
)


@app.get("/")
async def root():
    return {"message": "Virtual Try-On Bot API", "status": "running"}


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "redis": "connected" if redis_service.redis else "disconnected",
        "debug": settings.debug
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug
    )
