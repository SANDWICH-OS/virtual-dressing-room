#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∏–π –±–æ—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
"""

import os
import sys
import asyncio
import sqlite3
from pathlib import Path
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv(".env")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(
    sys.stdout,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    level="INFO"
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates:
    waiting_for_selfie = "waiting_for_selfie"
    waiting_for_full_body = "waiting_for_full_body"
    waiting_for_clothing = "waiting_for_clothing"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
    return sqlite3.connect('virtual_tryon.db')

def save_user(telegram_user):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_user.id,))
        user = cursor.fetchone()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                INSERT INTO users (telegram_id, username, first_name, last_name, subscription_type)
                VALUES (?, ?, ?, ?, ?)
            """, (
                telegram_user.id,
                telegram_user.username,
                telegram_user.first_name,
                telegram_user.last_name,
                'free'
            ))
            conn.commit()
            user_id = cursor.lastrowid
            logger.info(f"‚úÖ Created new user: {telegram_user.id} (ID: {user_id})")
        else:
            user_id = user[0]
            logger.info(f"‚úÖ User already exists: {telegram_user.id} (ID: {user_id})")
        
        return user_id
        
    except Exception as e:
        logger.error(f"‚ùå Error saving user: {e}")
        return None
    finally:
        conn.close()

def save_photo(user_id, photo_url, photo_type):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –≤ –ë–î"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            INSERT INTO user_photos (user_id, photo_url, photo_type)
            VALUES (?, ?, ?)
        """, (user_id, photo_url, photo_type))
        conn.commit()
        photo_id = cursor.lastrowid
        logger.info(f"‚úÖ Saved {photo_type} photo for user {user_id} (Photo ID: {photo_id})")
        return photo_id
        
    except Exception as e:
        logger.error(f"‚ùå Error saving photo: {e}")
        return None
    finally:
        conn.close()

def get_user_photos(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT photo_type, photo_url, created_at 
            FROM user_photos 
            WHERE user_id = ? 
            ORDER BY created_at DESC
        """, (user_id,))
        photos = cursor.fetchall()
        return photos
        
    except Exception as e:
        logger.error(f"‚ùå Error getting photos: {e}")
        return []
    finally:
        conn.close()

async def working_bot():
    """–†–∞–±–æ—á–∏–π –±–æ—Ç —Å –ë–î"""
    try:
        logger.info("üöÄ Starting Working Virtual Try-On Bot...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token or bot_token == "your_telegram_bot_token_here":
            logger.error("‚ùå BOT_TOKEN not set!")
            return False
        
        logger.info(f"‚úÖ BOT_TOKEN found: {bot_token[:10]}...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º aiogram
        from aiogram import Bot, Dispatcher
        from aiogram.types import Message, PhotoSize
        from aiogram.filters import Command
        from aiogram.enums import ParseMode
        from aiogram.fsm.context import FSMContext
        from aiogram.fsm.storage.memory import MemoryStorage
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(token=bot_token, parse_mode=ParseMode.HTML)
        dp = Dispatcher(storage=MemoryStorage())
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @dp.message(Command("start"))
        async def start_handler(message: Message, state: FSMContext):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = save_user(message.from_user)
            
            if user_id:
                await message.answer(
                    f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Virtual Try-On Bot!</b>\n\n"
                    f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–∏–º–µ—Ä–∏—Ç—å –æ–¥–µ–∂–¥—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
                    "üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
                    "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n"
                    "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –≤ –Ω–æ–≤–æ–π –æ–¥–µ–∂–¥–µ\n"
                    "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ—Ä–∫–∏\n\n"
                    "üöÄ <b>–ù–∞—á–Ω–µ–º?</b>\n"
                    "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ —Ñ–æ—Ç–æ!\n\n"
                    "üì∑ <b>–®–∞–≥ 1:</b> –ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Å–µ–ª—Ñ–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
                )
                
                await state.set_state(UserStates.waiting_for_selfie)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        @dp.message(Command("help"))
        async def help_handler(message: Message):
            await message.answer(
                "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
                "üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                "/profile - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º\n\n"
                "üì∏ <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å try-on:</b>\n"
                "1. –ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Å–µ–ª—Ñ–∏\n"
                "2. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç\n"
                "3. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã\n"
                "4. –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
                "üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ\n"
                "‚Ä¢ –°–µ–ª—Ñ–∏ –¥–µ–ª–∞–π –∞–Ω—Ñ–∞—Å —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º\n"
                "‚Ä¢ –§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç - –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –ø–æ–∑–µ\n"
                "‚Ä¢ –û–¥–µ–∂–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ"
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
        @dp.message(Command("profile"))
        async def profile_handler(message: Message):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            conn = get_db_connection()
            cursor = conn.cursor()
            
            try:
                cursor.execute("""
                    SELECT id, telegram_id, username, first_name, last_name, 
                           subscription_type, generation_count, created_at
                    FROM users 
                    WHERE telegram_id = ?
                """, (message.from_user.id,))
                user = cursor.fetchone()
                
                if not user:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                photos = get_user_photos(user[0])
                
                photo_info = []
                for photo in photos:
                    photo_info.append(f"‚Ä¢ {photo[0]}: ‚úÖ")
                
                if not photo_info:
                    photo_info = ["‚Ä¢ –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"]
                
                await message.answer(
                    f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                    f"üÜî ID: {user[0]}\n"
                    f"üì± Telegram ID: {user[1]}\n"
                    f"üë§ –ò–º—è: {user[3]} {user[4] or ''}\n"
                    f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {user[5]}\n"
                    f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {user[6]}\n\n"
                    f"üì∏ <b>–§–æ—Ç–æ:</b>\n" + "\n".join(photo_info)
                )
                
            except Exception as e:
                logger.error(f"‚ùå Error getting profile: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
            finally:
                conn.close()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
        @dp.message(lambda m: m.photo is not None)
        async def photo_handler(message: Message, state: FSMContext):
            current_state = await state.get_state()
            user_id = save_user(message.from_user)
            
            if not user_id:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            photo = max(message.photo, key=lambda p: p.file_size)
            
            # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ
            file = await bot.get_file(photo.file_id)
            photo_url = f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"
            
            if current_state == UserStates.waiting_for_selfie:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–ª—Ñ–∏
                photo_id = save_photo(user_id, photo_url, "selfie")
                if photo_id:
                    await message.answer("‚úÖ –°–µ–ª—Ñ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                    await state.set_state(UserStates.waiting_for_full_body)
                    await message.answer(
                        "üì∏ <b>–®–∞–≥ 2:</b> –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç"
                    )
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–ª—Ñ–∏")
                
            elif current_state == UserStates.waiting_for_full_body:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç
                photo_id = save_photo(user_id, photo_url, "full_body")
                if photo_id:
                    await message.answer("‚úÖ –§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                    
                    # –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω
                    await state.clear()
                    await message.answer(
                        "üéâ <b>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!\n\n"
                        "üëï <b>–®–∞–≥ 3:</b> –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏"
                    )
                    await state.set_state(UserStates.waiting_for_clothing)
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ")
                
            elif current_state == UserStates.waiting_for_clothing:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã
                photo_id = save_photo(user_id, photo_url, "clothing")
                if photo_id:
                    await message.answer("‚úÖ –§–æ—Ç–æ –æ–¥–µ–∂–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º try-on (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
                    await state.clear()
                    await message.answer(
                        "‚ö° <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é try-on –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>\n"
                        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥\n\n"
                        "üéâ <b>Try-on –≥–æ—Ç–æ–≤!</b>\n\n"
                        "(–ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ)\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π /profile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ"
                    )
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã")
            
            else:
                await message.answer(
                    "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
                )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @dp.message()
        async def echo_handler(message: Message):
            await message.answer(
                "ü§ñ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                "/help - –ü–æ–º–æ—â—å\n"
                "/profile - –ü—Ä–æ—Ñ–∏–ª—å\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
            )
        
        logger.info("‚úÖ Bot handlers registered")
        logger.info("üöÄ Starting bot polling...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        if 'bot' in locals():
            await bot.session.close()
    
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await working_bot()
    if not success:
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
